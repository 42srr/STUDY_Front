# 1. 프로그래밍

## 1.1 프로그래밍이란?

> 정확 상세하게 요구사항을 설명하는 작업 ⇒ 코드란 결과물
> 

프로그래밍 ? 컴퓨터와 대화 하기 위해서 필요한 것 

← 그 전에 무엇을 실행하고 싶은지에 대한 정의가 우선

문제 해결 능력

- 문제 이해 후 적절한 문제 해결방안 정의 필요
- = 문제 해결 능력 (알고리즘과는 다름)
- ⇒ 방안 고려시, 컴퓨팅 사고가 필요
- 직관&직감의 영역 ← 우리의 사고와 경험에 영향

컴퓨팅 사고란?

- 컴퓨터 입장에서 문제 바라보기
- 일반인의 사고와 다른 점 : 포괄&익숙함을 당연시하는 안이함
- 논리적, 수학적 사고 핑료
- 과제를 작은 단위로 분해 → 패턴화 추출
- 프로그래밍 내 사용될 모든 개념 → 평가 가능하도록 정의

> 따라서, 문제가 복잡 / 명확하지 않더라도, 
복잡 → 분해 (decomposition)
> 
> 
> 자료 → 정리 & 구분 (modeling)
> 

ex) 로봇의 ‘걷다’ 라는 기능을 디자인하려면,

판단해야하는 상태 / 상태 판단 시기 / 판단 기준 정의

→ 바탕으로 분해한 처리process 의 실행 여부를 결정

- 장애물은 무엇? 크기/움직임등
- 어떤 범위 내인지 수치화

## 1.2 프로그래밍 언어

> 구문 syntax + 의미 semantics 의 조합
> 

컴퓨터에게 전달해야 함 

**: 기계어**로 명령을 전달

사람→ (프로그래밍 언어) → 컴파일러 or 인터프리터 → (기계어) → 컴퓨터

## 1.3 구문과 의미

```c
const number = 'string'; 
console.log(number * number); // NaN
```

문제 해결방안

언어에 맞는 적절한 **문법**의 코드

= 해결방법의 구체적 구현물

---

문법 + 코드가 수행하고자 하는 걸 수행하는 것(문제에 맞는 의미) 

= 요구사항의 실행 = 문제 해결

> 결론
결국 프로그래밍은 요구사항의 집합을 분석해서 적절한 자료구조와 함수의 집합으로 변환한 후, 그 흐름을 제어하는 것이다.
>
